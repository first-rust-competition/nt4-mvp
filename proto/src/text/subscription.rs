//! Strongly-typed message bodies for messages related to handling subscriptions to entry values.
//!
//! These messages don't contain the value of the entry directly, but will indicate to the server that it should start
//! or stop sending updates over CBOR to this client
use super::MessageBody;
use serde::{Deserialize, Serialize};

/// Get Values Message
///
/// Sent by a client to indicate to a server that it wishes to get the current values associated with the specified
/// identifiers. The server responds to this by sending the values over binary packets.
///
/// In general, this message should not be used to periodically poll for the value of an entry. Rather, a client should use
/// the [`Subscribe`] message to receive asynchronous updates related to entries.
///
/// [`Subscribe`]: ./struct.Subscribe.html
#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct GetValues {
    /// The identifiers the client wishes to receive the values of
    pub ids: Vec<u32>,
}

/// Subscribe Message
///
/// Sent by a client to indicate to a server that it wishes to subscribe to all future updates for the given IDs.
/// Depending on the specified options, the client will immediately receive updates for the given IDs, or it will receive them periodically.
#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Subscribe {
    /// The identifiers the client wishes to subscribe to
    pub ids: Vec<u32>,
    /// The subscription UID. This is generated by the client and is used to unsubscribe later.
    ///
    /// If another Subscribe message is sent with the same UID, the old subscriptions will be overwritten.
    pub subuid: u32,
    /// Additional options
    pub options: Option<SubscribeOptions>,
}

fn default_periodic() -> f64 {
    0.1
}

#[derive(Serialize, Deserialize, Default, Debug, PartialEq)]
#[serde(default)]
pub struct SubscribeOptions {
    /// If this value is true, the server will send value updates to the subscribed client
    /// **immediately** when it receives it, rather than on a periodic timer.
    ///
    /// This value defaults to false.
    pub immediate: bool,
    /// If this value is defined, it specifies the period of the timer the server should use
    /// to send updates to this client. This value is specified in **seconds**.
    ///
    /// This value defaults to 100ms, the default update rate in NTv3.
    #[serde(default = "default_periodic")]
    pub periodic: f64,
    /// If this value is true, **all** value changes are sent to the subscribing client,
    /// if it's false the client will only receive the latest value associated with the key, in the same way as NTv3.
    ///
    /// This value defaults to false
    pub logging: bool,
}

/// Unsubscribe Message
///
/// Sent by a client to indicate that it wishes to stop its subscription. When this message is received
/// the server will stop sending value updates to the client for IDs associated with the given `subuid`.
#[derive(Serialize, Deserialize, Debug, PartialEq)]
pub struct Unsubscribe {
    /// The subscription UID that was used in the initial [`Subscribe`] message.
    ///
    /// [`Subscribe`]: ./struct.Subscribe.html
    pub subuid: u32,
}

impl_message!(GetValues, Subscribe, Unsubscribe);
